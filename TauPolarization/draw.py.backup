import os, numpy, math, copy, math
from array import array
from ROOT import gStyle, TCanvas, TLegend
from officialStyle import officialStyle

from DataMCPlot import *

gROOT.SetBatch(True)
officialStyle(gStyle)
gStyle.SetOptTitle(0)


filedict = {
    'inclusive':{'filename':'ztt_mt_90_shapes_1.root'},
    }

process = {
#    'TotalSig':{'name':'TotalSig', 'isSignal':1, 'order':1001},
    'QCD':{'name':'QCD', 'isSignal':0, 'order':1},
    'TT':{'name':'TT', 'isSignal':0, 'order':2},
    'VV':{'name':'VV', 'isSignal':0, 'order':3},
    'W':{'name':'W', 'isSignal':0, 'order':4},
    'ZJ':{'name':'ZJ', 'isSignal':0, 'order':5},
    'ZL':{'name':'ZL', 'isSignal':0, 'order':6},
#    'ZTT':{'name':'ZTT', 'isSignal':0, 'order':1},
    'ZTT_left':{'name':'ZTT_left', 'isSignal':0, 'order':1},
    'ZTT_right':{'name':'ZTT_right', 'isSignal':0, 'order':2},
    'data':{'name':'data_obs', 'isSignal':0, 'order':2999},
}


hists = []

for key, ifile in filedict.iteritems():

    file = TFile(ifile['filename'])

    for dtype in ['postfit', 'prefit']:

        print '-'*80
        print dtype, key

        hist = DataMCPlot('h_mass_' + dtype + '_' + key)        
        hist.legendBorders = 0.6, 0.6, 0.88, 0.88

        for ii, val in process.iteritems():
            _h_ = file.Get(ifile['filename'].replace('90_shapes_', '').replace('.root', '') + '_13TeV_' + dtype + '/' + val['name'])
            _h_.SetName(val['name'])
            _h_.GetXaxis().SetTitle('Neutral-Charge asymmetry')
            _h_.GetXaxis().SetTitleOffset(1.1)
            _h_.GetXaxis().SetLabelColor(1)
            _h_.GetXaxis().SetLabelSize(0.05)


            hist.AddHistogram(_h_.GetName(), _h_, val['order'])
        
            if val['name'] in ['data_obs']:
                hist.Hist(_h_.GetName()).stack = False



        hist.Group('electroweak', ['W', 'ZL', 'ZJ', 'VV'])

        canvas = TCanvas()
        hist.DrawStack('HIST', None, None, None, None, 2)

        canvas.Print('plots/' + dtype + '_' + key + '.gif')
        canvas.Print('plots/' + dtype + '_' + key + '.pdf')

        print hist

        if dtype=='postfit':
            nL = hist.Hist('ZTT_left').Yield()
            nR = hist.Hist('ZTT_right').Yield()
            pol = ( nR - nL ) / ( nR + nL )
            error = math.sqrt( ( 1. - pol*pol) / ( nR + nL ) )
            print " --- obs. Polarisation with these cuts = ", pol, " +/- ", error


#            hists.append(copy.deepcopy(hist.Hist('ZTT_left')))
#            hists.append(copy.deepcopy(hist.Hist('ZTT_right')))
#            hists.append(copy.deepcopy(hist.Hist('data_obs')))


#print hists
#
#canvas = TCanvas('c', 'c', 700,600)
#hists[2].Draw('ep')
#hists[0].Draw('hsame')
#hists[1].Draw('hsame')
#
##leg = TLegend(0.1,0.7,0.5,0.9)
##leg.AddEntry(hists[2], "data", 'lep')
#
#hists[0].SetLineColor = 2
#hists[1].SetLineColor = 4
#
#hists[0].SetLineWidth = 2
#hists[1].SetLineWidth = 2
#
##leg.AddEntry(hists[1], "left-handed", 'h')
##leg.AddEntry(hists[2], "right-handed", 'h')
#
#canvas.Print('plots/check.gif')
